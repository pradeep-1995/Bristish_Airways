{"cells":[{"cell_type":"markdown","metadata":{"id":"1cDkaxYbBCDK"},"source":["# Task 1\n","\n","---\n","\n","## Web scraping and analysis\n","\n","This Jupyter notebook includes some code to get you started with web scraping. We will use a package called `BeautifulSoup` to collect the data from the web. Once you've collected your data and saved it into a local `.csv` file you should start with your analysis.\n","\n","### Scraping data from Skytrax\n","\n","If you visit [https://www.airlinequality.com] you can see that there is a lot of data there. For this task, we are only interested in reviews related to British Airways and the Airline itself.\n","\n","If you navigate to this link: [https://www.airlinequality.com/airline-reviews/british-airways] you will see this data. Now, we can use `Python` and `BeautifulSoup` to collect all the links to the reviews and then to collect the text data on each of the individual review links."]},{"cell_type":"code","execution_count":1,"metadata":{"id":"pyuGEXdZBCDR","executionInfo":{"status":"ok","timestamp":1679360369556,"user_tz":-330,"elapsed":20,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"outputs":[],"source":["import requests\n","from bs4 import BeautifulSoup\n","import pandas as pd\n","import re"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OL05faprBCDV","executionInfo":{"status":"ok","timestamp":1679360422214,"user_tz":-330,"elapsed":14325,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"ab4791d6-4052-434a-c755-e1e587f998e4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Scraping page 1\n","   ---> 100 total reviews\n","Scraping page 2\n","   ---> 200 total reviews\n","Scraping page 3\n","   ---> 300 total reviews\n","Scraping page 4\n","   ---> 400 total reviews\n","Scraping page 5\n","   ---> 500 total reviews\n","Scraping page 6\n","   ---> 600 total reviews\n","Scraping page 7\n","   ---> 700 total reviews\n","Scraping page 8\n","   ---> 800 total reviews\n","Scraping page 9\n","   ---> 900 total reviews\n","Scraping page 10\n","   ---> 1000 total reviews\n"]}],"source":["base_url = \"https://www.airlinequality.com/airline-reviews/british-airways\"\n","pages = 10\n","page_size = 100\n","\n","reviews = []\n","\n","# for i in range(1, pages + 1):\n","for i in range(1, pages + 1):\n","\n","    print(f\"Scraping page {i}\")\n","\n","    # Create URL to collect links from paginated data\n","    url = f\"{base_url}/page/{i}/?sortby=post_date%3ADesc&pagesize={page_size}\"\n","\n","    # Collect HTML data from this page\n","    response = requests.get(url)\n","\n","    # Parse content\n","    content = response.content\n","    parsed_content = BeautifulSoup(content, 'html.parser')\n","    for para in parsed_content.find_all(\"div\", {\"class\": \"text_content\"}):\n","        reviews.append(para.get_text())\n","    \n","    print(f\"   ---> {len(reviews)} total reviews\")"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"k_1ua2dTBCDa","executionInfo":{"status":"ok","timestamp":1679360427315,"user_tz":-330,"elapsed":550,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"0797e991-d36c-4b67-9d51-a3e7bba1eda8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                             reviews\n","0  ✅ Trip Verified |  I was horrified by the extr...\n","1  ✅ Trip Verified |  \\r\\nThe worst cabin experie...\n","2  ✅ Trip Verified | First time flying with Briti...\n","3  ✅ Trip Verified |  The latest affront. Stood i...\n","4  Not Verified |  Booked a flight return flight ..."],"text/html":["\n","  <div id=\"df-e78464ea-4abe-41e9-9db3-54ded547856d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>reviews</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>✅ Trip Verified |  I was horrified by the extr...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>✅ Trip Verified |  \\r\\nThe worst cabin experie...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>✅ Trip Verified | First time flying with Briti...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>✅ Trip Verified |  The latest affront. Stood i...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Not Verified |  Booked a flight return flight ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e78464ea-4abe-41e9-9db3-54ded547856d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e78464ea-4abe-41e9-9db3-54ded547856d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e78464ea-4abe-41e9-9db3-54ded547856d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}],"source":["df = pd.DataFrame()\n","df[\"reviews\"] = reviews\n","df.head()"]},{"cell_type":"markdown","metadata":{"id":"gEM1k4-qBCDc"},"source":["Congratulations! Now you have your dataset for this task! The loops above collected 1000 reviews by iterating through the paginated pages on the website. However, if you want to collect more data, try increasing the number of pages!\n","\n"," The next thing that you should do is clean this data to remove any unnecessary text from each of the rows. For example, \"✅ Trip Verified\" can be removed from each row if it exists, as it's not relevant to what we want to investigate."]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oIj6FoVuBCDe","executionInfo":{"status":"ok","timestamp":1679360430618,"user_tz":-330,"elapsed":11,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"9733c3c6-c149-4ea0-93d7-fbfb8cd2d2e3"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1000 entries, 0 to 999\n","Data columns (total 1 columns):\n"," #   Column   Non-Null Count  Dtype \n","---  ------   --------------  ----- \n"," 0   reviews  1000 non-null   object\n","dtypes: object(1)\n","memory usage: 7.9+ KB\n"]}],"source":["df.info()"]},{"cell_type":"code","source":["df.reviews = df.reviews.str.split(\"|\",expand=True)[1]"],"metadata":{"id":"sOPY7suyEDiQ","executionInfo":{"status":"ok","timestamp":1679360433302,"user_tz":-330,"elapsed":6,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["df.sample(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"Tg2IG4H1FIxF","executionInfo":{"status":"ok","timestamp":1679360435835,"user_tz":-330,"elapsed":13,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"c6412fee-bb2e-4b71-b97c-0d134559a3de"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                               reviews\n","866    While it is still fresh in my mind, I’d like...\n","352   Absolutely appalling experience. British Airw...\n","868   Madrid to London. Good improvement. This BA c..."],"text/html":["\n","  <div id=\"df-cd17adac-638b-4361-9778-5a30eedbf29f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>reviews</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>866</th>\n","      <td>While it is still fresh in my mind, I’d like...</td>\n","    </tr>\n","    <tr>\n","      <th>352</th>\n","      <td>Absolutely appalling experience. British Airw...</td>\n","    </tr>\n","    <tr>\n","      <th>868</th>\n","      <td>Madrid to London. Good improvement. This BA c...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cd17adac-638b-4361-9778-5a30eedbf29f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-cd17adac-638b-4361-9778-5a30eedbf29f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cd17adac-638b-4361-9778-5a30eedbf29f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["#### **Rule Based Approch**\n","\n","* This is a practical approach to analyzing text without training or using machine learning models. The result of this approach is a set of rules based on which the text is labeled as positive/negative/neutral. These rules are also known as lexicons. Hence, the Rule-based approach is called Lexicon based approach.\n","\n","* A lexicon refers to a collection of words or phrases with associated information such as definitions, parts of speech, semantic and syntactic information, and more. Lexicons can be used in various NLP tasks, including sentiment analysis, text classification, named entity recognition, and more.\n","\n","Widely used lexicon-based approaches are TextBlob, VADER, SentiWordNet."],"metadata":{"id":"qijlchdUM4Wp"}},{"cell_type":"markdown","source":["**Data preprocessing steps:**\n","\n","Cleaning the text\n","\n","Tokenization\n","\n","Enrichment – POS tagging\n","\n","Stopwords removal\n","\n","Obtaining the stem words"],"metadata":{"id":"jYQTR3n1Otgr"}},{"cell_type":"markdown","source":["### **1. Cleaning Text**"],"metadata":{"id":"F8SznzFjO5Sy"}},{"cell_type":"code","source":["def preprocess(q):\n","\n","  # Lower_case\n","  q = str(q).lower().strip()\n","\n","  # Replace certain special characters with their string equivalents\n","  q = q.replace('%',' percent')\n","  q = q.replace('$',' dollar ')\n","  q = q.replace('₹', ' rupee ')\n","  q = q.replace('€', ' euro ')\n","  q = q.replace('@', ' at ')\n","\n","  # The pattern '[math]' appears around 900 times in the whole dataset.\n","  q = q.replace('[math]','')\n","\n","  # Replacing some numbers with string equivalents (not perfect, can be done better to account for more cases)\n","  q = q.replace(',000,000,000 ','b ')\n","  q = q.replace(',000,000 ','m ')\n","  q = q.replace(',000 ','k ')\n","  q = re.sub(r'([0-9]+)000000000', r'\\1b',q)\n","  q = re.sub(r'([0-9]+)000000', r'\\1m', q)\n","  q = re.sub(r'([0-9]+)000', r'\\1k', q)\n","\n","  # Decontracting words\n","  # https://en.wikipedia.org/wiki/Wikipedia%3aList_of_English_contractions\n","  # https://stackoverflow.com/a/19794953\n","  contractions = {\n","          \"ain't\": \"am not\",\n","    \"aren't\": \"are not\",\n","    \"can't\": \"can not\",\n","    \"can't've\": \"can not have\",\n","    \"'cause\": \"because\",\n","    \"could've\": \"could have\",\n","    \"couldn't\": \"could not\",\n","    \"couldn't've\": \"could not have\",\n","    \"didn't\": \"did not\",\n","    \"doesn't\": \"does not\",\n","    \"don't\": \"do not\",\n","    \"hadn't\": \"had not\",\n","    \"hadn't've\": \"had not have\",\n","    \"hasn't\": \"has not\",\n","    \"haven't\": \"have not\",\n","    \"he'd\": \"he would\",\n","    \"he'd've\": \"he would have\",\n","    \"he'll\": \"he will\",\n","    \"he'll've\": \"he will have\",\n","    \"he's\": \"he is\",\n","    \"how'd\": \"how did\",\n","    \"how'd'y\": \"how do you\",\n","    \"how'll\": \"how will\",\n","    \"how's\": \"how is\",\n","    \"i'd\": \"i would\",\n","    \"i'd've\": \"i would have\",\n","    \"i'll\": \"i will\",\n","    \"i'll've\": \"i will have\",\n","    \"i'm\": \"i am\",\n","    \"i've\": \"i have\",\n","    \"isn't\": \"is not\",\n","    \"it'd\": \"it would\",\n","    \"it'd've\": \"it would have\",\n","    \"it'll\": \"it will\",\n","    \"it'll've\": \"it will have\",\n","    \"it's\": \"it is\",\n","    \"let's\": \"let us\",\n","    \"ma'am\": \"madam\",\n","    \"mayn't\": \"may not\",\n","    \"might've\": \"might have\",\n","    \"mightn't\": \"might not\",\n","    \"mightn't've\": \"might not have\",\n","    \"must've\": \"must have\",\n","    \"mustn't\": \"must not\",\n","    \"mustn't've\": \"must not have\",\n","    \"needn't\": \"need not\",\n","    \"needn't've\": \"need not have\",\n","    \"o'clock\": \"of the clock\",\n","    \"oughtn't\": \"ought not\",\n","    \"oughtn't've\": \"ought not have\",\n","    \"shan't\": \"shall not\",\n","    \"sha'n't\": \"shall not\",\n","    \"shan't've\": \"shall not have\",\n","    \"she'd\": \"she would\",\n","    \"she'd've\": \"she would have\",\n","    \"she'll\": \"she will\",\n","    \"she'll've\": \"she will have\",\n","    \"she's\": \"she is\",\n","    \"should've\": \"should have\",\n","    \"shouldn't\": \"should not\",\n","    \"shouldn't've\": \"should not have\",\n","    \"so've\": \"so have\",\n","    \"so's\": \"so as\",\n","    \"that'd\": \"that would\",\n","    \"that'd've\": \"that would have\",\n","    \"that's\": \"that is\",\n","    \"there'd\": \"there would\",\n","    \"there'd've\": \"there would have\",\n","    \"there's\": \"there is\",\n","    \"they'd\": \"they would\",\n","    \"they'd've\": \"they would have\",\n","    \"they'll\": \"they will\",\n","    \"they'll've\": \"they will have\",\n","    \"they're\": \"they are\",\n","    \"they've\": \"they have\",\n","    \"to've\": \"to have\",\n","    \"wasn't\": \"was not\",\n","    \"we'd\": \"we would\",\n","    \"we'd've\": \"we would have\",\n","    \"we'll\": \"we will\",\n","    \"we'll've\": \"we will have\",\n","    \"we're\": \"we are\",\n","    \"we've\": \"we have\",\n","    \"weren't\": \"were not\",\n","    \"what'll\": \"what will\",\n","    \"what'll've\": \"what will have\",\n","    \"what're\": \"what are\",\n","    \"what's\": \"what is\",\n","    \"what've\": \"what have\",\n","    \"when's\": \"when is\",\n","    \"when've\": \"when have\",\n","    \"where'd\": \"where did\",\n","    \"where's\": \"where is\",\n","    \"where've\": \"where have\",\n","    \"who'll\": \"who will\",\n","    \"who'll've\": \"who will have\",\n","    \"who's\": \"who is\",\n","    \"who've\": \"who have\",\n","    \"why's\": \"why is\",\n","    \"why've\": \"why have\",\n","    \"will've\": \"will have\",\n","    \"won't\": \"will not\",\n","    \"won't've\": \"will not have\",\n","    \"would've\": \"would have\",\n","    \"wouldn't\": \"would not\",\n","    \"wouldn't've\": \"would not have\",\n","    \"y'all\": \"you all\",\n","    \"y'all'd\": \"you all would\",\n","    \"y'all'd've\": \"you all would have\",\n","    \"y'all're\": \"you all are\",\n","    \"y'all've\": \"you all have\",\n","    \"you'd\": \"you would\",\n","    \"you'd've\": \"you would have\",\n","    \"you'll\": \"you will\",\n","    \"you'll've\": \"you will have\",\n","    \"you're\": \"you are\",\n","    \"you've\": \"you have\"\n","  }\n","\n","  q_decontracted = []\n","  for word in q.split():\n","    if word in contractions:\n","      word = contractions[word]\n","    q_decontracted.append(word)\n","  q = ' '.join(q_decontracted)\n","\n","  # Take other short form\n","  q = q.replace(\"'ve\", \" have\")\n","  q = q.replace(\"n't\", \" not\")\n","  q = q.replace(\"'re\", \" are\")\n","  q = q.replace(\"'ll\", \" will\")\n","\n","  # Remove HTML_tags\n","  q = BeautifulSoup(q)\n","  q = q.get_text()\n","\n","  # Remove punctuations\n","  pattern = re.compile('\\W')\n","  q = re.sub(pattern, ' ', q).strip()\n","\n","  return q"],"metadata":{"id":"DUEs1N4ALElv","executionInfo":{"status":"ok","timestamp":1679360443189,"user_tz":-330,"elapsed":578,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["df['Cleaned_reviews'] = df['reviews'].apply(preprocess)"],"metadata":{"id":"pl_oCLH9OBA3","executionInfo":{"status":"ok","timestamp":1679360445388,"user_tz":-330,"elapsed":799,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["print(df.shape)\n","df.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":161},"id":"Xj9_bR-iOCSn","executionInfo":{"status":"ok","timestamp":1679360447904,"user_tz":-330,"elapsed":16,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"cf4faccf-0f54-4d7e-efb9-7382a81dd512"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["(1000, 2)\n"]},{"output_type":"execute_result","data":{"text/plain":["                                             reviews  \\\n","0    I was horrified by the extremely small seats...   \n","1    \\r\\nThe worst cabin experience ever: cramped...   \n","2   First time flying with British Airways and fi...   \n","\n","                                     Cleaned_reviews  \n","0  i was horrified by the extremely small seats a...  \n","1  the worst cabin experience ever  cramped seats...  \n","2  first time flying with british airways and fir...  "],"text/html":["\n","  <div id=\"df-09ec3c17-1b67-4abe-a9aa-4062d7b27ccf\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>reviews</th>\n","      <th>Cleaned_reviews</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>I was horrified by the extremely small seats...</td>\n","      <td>i was horrified by the extremely small seats a...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>\\r\\nThe worst cabin experience ever: cramped...</td>\n","      <td>the worst cabin experience ever  cramped seats...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>First time flying with British Airways and fi...</td>\n","      <td>first time flying with british airways and fir...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09ec3c17-1b67-4abe-a9aa-4062d7b27ccf')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-09ec3c17-1b67-4abe-a9aa-4062d7b27ccf button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-09ec3c17-1b67-4abe-a9aa-4062d7b27ccf');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["### **2. Tokenization Text**\n","Tokenization is the process of breaking down a text document into smaller units of text called tokens. These tokens could be words, phrases, or even individual characters. The main purpose of tokenization is to convert the text into a format that can be easily processed by a computer program. Tokenization is a common preprocessing step in natural language processing (NLP) tasks such as text classification, sentiment analysis, and machine translation.\n","\n","Tokenization is the process of breaking the text into smaller pieces called Tokens. It can be performed at sentences(sentence tokenization) or word level(word tokenization).\n","\n","**This punkt tokenizer divides a text into a list of sentences by using an unsupervised algorithm to build a model for abbreviation words, \n","collocations, and words that start sentences.**"],"metadata":{"id":"RZhv2bG5Q6gy"}},{"cell_type":"code","source":["import nltk\n","\n","nltk.download('punkt')\n","from nltk.tokenize import word_tokenize"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LzRTbEswQVSM","executionInfo":{"status":"ok","timestamp":1679360456022,"user_tz":-330,"elapsed":2341,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"948622c4-ef44-41d1-f0fc-41c98b88c378"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"]}]},{"cell_type":"code","source":["df['tokenize_review'] = df['Cleaned_reviews'].apply(lambda x: word_tokenize(x))"],"metadata":{"id":"l57mXa_iTaM4","executionInfo":{"status":"ok","timestamp":1679360459436,"user_tz":-330,"elapsed":823,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["print(df.shape)\n","df.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":161},"id":"6VXESGBtTaVr","executionInfo":{"status":"ok","timestamp":1679360463482,"user_tz":-330,"elapsed":718,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"f8979f2b-f3cb-47d9-8101-9956b20fbb4b"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["(1000, 3)\n"]},{"output_type":"execute_result","data":{"text/plain":["                                             reviews  \\\n","0    I was horrified by the extremely small seats...   \n","1    \\r\\nThe worst cabin experience ever: cramped...   \n","2   First time flying with British Airways and fi...   \n","\n","                                     Cleaned_reviews  \\\n","0  i was horrified by the extremely small seats a...   \n","1  the worst cabin experience ever  cramped seats...   \n","2  first time flying with british airways and fir...   \n","\n","                                     tokenize_review  \n","0  [i, was, horrified, by, the, extremely, small,...  \n","1  [the, worst, cabin, experience, ever, cramped,...  \n","2  [first, time, flying, with, british, airways, ...  "],"text/html":["\n","  <div id=\"df-95afe4ab-90c0-4eb9-aac0-04284cea80da\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>reviews</th>\n","      <th>Cleaned_reviews</th>\n","      <th>tokenize_review</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>I was horrified by the extremely small seats...</td>\n","      <td>i was horrified by the extremely small seats a...</td>\n","      <td>[i, was, horrified, by, the, extremely, small,...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>\\r\\nThe worst cabin experience ever: cramped...</td>\n","      <td>the worst cabin experience ever  cramped seats...</td>\n","      <td>[the, worst, cabin, experience, ever, cramped,...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>First time flying with British Airways and fi...</td>\n","      <td>first time flying with british airways and fir...</td>\n","      <td>[first, time, flying, with, british, airways, ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95afe4ab-90c0-4eb9-aac0-04284cea80da')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-95afe4ab-90c0-4eb9-aac0-04284cea80da button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-95afe4ab-90c0-4eb9-aac0-04284cea80da');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["### **3. POS_tagging Text**\n","\n","Parts of Speech (POS) tagging is a process of converting each token into a tuple having the form (word, tag). POS tagging essential to preserve the context of the word and is essential for Lemmatization.\n","\n","To perform POS tagging using Spacy, you first need to install Spacy and download a language model."],"metadata":{"id":"LSwHunu1ffHt"}},{"cell_type":"code","source":["!pip install spacy\n","!python -m spacy download en_core_web_sm\n","import spacy\n","\n","# Load the language model\n","nlp = spacy.load('en_core_web_sm')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gnR2kMqHTaZW","executionInfo":{"status":"ok","timestamp":1679360500878,"user_tz":-330,"elapsed":23524,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"3f6970cd-d34c-4c9e-c2f1-6fa7873738ef"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: spacy in /usr/local/lib/python3.9/dist-packages (3.5.1)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.9/dist-packages (from spacy) (2.27.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.9/dist-packages (from spacy) (3.1.2)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.9/dist-packages (from spacy) (63.4.3)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.9/dist-packages (from spacy) (1.0.9)\n","Requirement already satisfied: wasabi<1.2.0,>=0.9.1 in /usr/local/lib/python3.9/dist-packages (from spacy) (1.1.1)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.9/dist-packages (from spacy) (4.65.0)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.9/dist-packages (from spacy) (2.0.7)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.9/dist-packages (from spacy) (1.22.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.9/dist-packages (from spacy) (23.0)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.9/dist-packages (from spacy) (2.0.8)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.9/dist-packages (from spacy) (1.0.4)\n","Requirement already satisfied: typer<0.8.0,>=0.3.0 in /usr/local/lib/python3.9/dist-packages (from spacy) (0.7.0)\n","Requirement already satisfied: pathy>=0.10.0 in /usr/local/lib/python3.9/dist-packages (from spacy) (0.10.1)\n","Requirement already satisfied: smart-open<7.0.0,>=5.2.1 in /usr/local/lib/python3.9/dist-packages (from spacy) (6.3.0)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /usr/local/lib/python3.9/dist-packages (from spacy) (3.0.12)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.9/dist-packages (from spacy) (3.0.8)\n","Requirement already satisfied: thinc<8.2.0,>=8.1.8 in /usr/local/lib/python3.9/dist-packages (from spacy) (8.1.9)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<1.11.0,>=1.7.4 in /usr/local/lib/python3.9/dist-packages (from spacy) (1.10.6)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.3 in /usr/local/lib/python3.9/dist-packages (from spacy) (2.4.6)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.9/dist-packages (from spacy) (3.3.0)\n","Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.9/dist-packages (from pydantic!=1.8,!=1.8.1,<1.11.0,>=1.7.4->spacy) (4.5.0)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.9/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2.0.12)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (1.26.15)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2022.12.7)\n","Requirement already satisfied: confection<1.0.0,>=0.0.1 in /usr/local/lib/python3.9/dist-packages (from thinc<8.2.0,>=8.1.8->spacy) (0.0.4)\n","Requirement already satisfied: blis<0.8.0,>=0.7.8 in /usr/local/lib/python3.9/dist-packages (from thinc<8.2.0,>=8.1.8->spacy) (0.7.9)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.9/dist-packages (from typer<0.8.0,>=0.3.0->spacy) (8.1.3)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.9/dist-packages (from jinja2->spacy) (2.1.2)\n","/usr/local/lib/python3.9/dist-packages/torch/cuda/__init__.py:497: UserWarning: Can't initialize NVML\n","  warnings.warn(\"Can't initialize NVML\")\n","2023-03-21 01:01:25.922929: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n","To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n","2023-03-21 01:01:27.016743: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64\n","2023-03-21 01:01:27.016846: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64\n","2023-03-21 01:01:27.016864: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n","2023-03-21 01:01:28.615006: E tensorflow/compiler/xla/stream_executor/cuda/cuda_driver.cc:267] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting en-core-web-sm==3.5.0\n","  Downloading https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.5.0/en_core_web_sm-3.5.0-py3-none-any.whl (12.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.8/12.8 MB\u001b[0m \u001b[31m76.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: spacy<3.6.0,>=3.5.0 in /usr/local/lib/python3.9/dist-packages (from en-core-web-sm==3.5.0) (3.5.1)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.3 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (2.4.6)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (3.0.12)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (1.22.4)\n","Requirement already satisfied: thinc<8.2.0,>=8.1.8 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (8.1.9)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (2.27.1)\n","Requirement already satisfied: smart-open<7.0.0,>=5.2.1 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (6.3.0)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (23.0)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (1.0.9)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (3.0.8)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (4.65.0)\n","Requirement already satisfied: typer<0.8.0,>=0.3.0 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (0.7.0)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (2.0.7)\n","Requirement already satisfied: pathy>=0.10.0 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (0.10.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (3.1.2)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (3.3.0)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (2.0.8)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<1.11.0,>=1.7.4 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (1.10.6)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (63.4.3)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (1.0.4)\n","Requirement already satisfied: wasabi<1.2.0,>=0.9.1 in /usr/local/lib/python3.9/dist-packages (from spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (1.1.1)\n","Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.9/dist-packages (from pydantic!=1.8,!=1.8.1,<1.11.0,>=1.7.4->spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (4.5.0)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.9/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (2.0.12)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (2022.12.7)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (1.26.15)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (3.4)\n","Requirement already satisfied: confection<1.0.0,>=0.0.1 in /usr/local/lib/python3.9/dist-packages (from thinc<8.2.0,>=8.1.8->spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (0.0.4)\n","Requirement already satisfied: blis<0.8.0,>=0.7.8 in /usr/local/lib/python3.9/dist-packages (from thinc<8.2.0,>=8.1.8->spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (0.7.9)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.9/dist-packages (from typer<0.8.0,>=0.3.0->spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (8.1.3)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.9/dist-packages (from jinja2->spacy<3.6.0,>=3.5.0->en-core-web-sm==3.5.0) (2.1.2)\n","\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n","You can now load the package via spacy.load('en_core_web_sm')\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/torch/cuda/__init__.py:497: UserWarning: Can't initialize NVML\n","  warnings.warn(\"Can't initialize NVML\")\n"]}]},{"cell_type":"code","source":["def pos_review(text):  \n","  # Take Tokenize Data and make into sentence and feed to pos_tagged\n","  sentence = ' '.join(list(map(lambda x: str(x), text)))\n","\n","  # Pos_tagged by spacy\n","  doc = nlp(sentence.strip())\n","  pos_tags = [(token.text, token.pos_) for token in doc]\n","\n","  return pos_tags"],"metadata":{"id":"r0GADpzkdTEQ","executionInfo":{"status":"ok","timestamp":1679360500880,"user_tz":-330,"elapsed":43,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["df['POS_tagged'] = df['tokenize_review'].apply(pos_review)"],"metadata":{"id":"qBpoMHs8s0gt","executionInfo":{"status":"ok","timestamp":1679360538645,"user_tz":-330,"elapsed":34615,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["print(df.shape)\n","df.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":240},"id":"rZ36FMmyJIF4","executionInfo":{"status":"ok","timestamp":1679360588195,"user_tz":-330,"elapsed":562,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"edc8e583-d9de-4fd0-fed0-4436f032b96c"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["(1000, 4)\n"]},{"output_type":"execute_result","data":{"text/plain":["                                             reviews  \\\n","0    I was horrified by the extremely small seats...   \n","1    \\r\\nThe worst cabin experience ever: cramped...   \n","2   First time flying with British Airways and fi...   \n","\n","                                     Cleaned_reviews  \\\n","0  i was horrified by the extremely small seats a...   \n","1  the worst cabin experience ever  cramped seats...   \n","2  first time flying with british airways and fir...   \n","\n","                                     tokenize_review  \\\n","0  [i, was, horrified, by, the, extremely, small,...   \n","1  [the, worst, cabin, experience, ever, cramped,...   \n","2  [first, time, flying, with, british, airways, ...   \n","\n","                                          POS_tagged  \n","0  [(i, PRON), (was, AUX), (horrified, VERB), (by...  \n","1  [(the, DET), (worst, ADJ), (cabin, NOUN), (exp...  \n","2  [(first, ADJ), (time, NOUN), (flying, VERB), (...  "],"text/html":["\n","  <div id=\"df-1f9fffd1-24f0-4698-b0a9-223da23db3b3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>reviews</th>\n","      <th>Cleaned_reviews</th>\n","      <th>tokenize_review</th>\n","      <th>POS_tagged</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>I was horrified by the extremely small seats...</td>\n","      <td>i was horrified by the extremely small seats a...</td>\n","      <td>[i, was, horrified, by, the, extremely, small,...</td>\n","      <td>[(i, PRON), (was, AUX), (horrified, VERB), (by...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>\\r\\nThe worst cabin experience ever: cramped...</td>\n","      <td>the worst cabin experience ever  cramped seats...</td>\n","      <td>[the, worst, cabin, experience, ever, cramped,...</td>\n","      <td>[(the, DET), (worst, ADJ), (cabin, NOUN), (exp...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>First time flying with British Airways and fi...</td>\n","      <td>first time flying with british airways and fir...</td>\n","      <td>[first, time, flying, with, british, airways, ...</td>\n","      <td>[(first, ADJ), (time, NOUN), (flying, VERB), (...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f9fffd1-24f0-4698-b0a9-223da23db3b3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1f9fffd1-24f0-4698-b0a9-223da23db3b3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1f9fffd1-24f0-4698-b0a9-223da23db3b3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["### **4. STOP_WORDS_Removal Text**\n","Stopwords in English are words that carry very little useful information. We need to remove them as part of text preprocessing. nltk has a list of stopwords of every language.\n","\n","Here we dont remove stopwords because it may help for sentimate analysis."],"metadata":{"id":"pjX0-WPVMOB_"}},{"cell_type":"markdown","source":["### **5. Obtaining the stem words ( Lemmatization )**\n","\n","A stem is a part of a word responsible for its lexical meaning. The two popular techniques of obtaining the root/stem words are Stemming and Lemmatization.\n","\n","The key difference is Stemming often gives some meaningless root words as it simply chops off some characters in the end. Lemmatization gives meaningful root words, however, it requires POS tags of the words.\n","\n","Lemmatization is the process of reducing words to their base or root form. In Natural Language Processing, it is used to group together different forms of a word so they can be analyzed as a single item.\n","\n","NLTK provides an interface to the WordNet lemmatizer which can be used to perform lemmatization on text."],"metadata":{"id":"hN2yzauvM6Hq"}},{"cell_type":"code","source":["# Obtaining the stem words – Lemmatization\n","from nltk.stem import WordNetLemmatizer\n","wordnet_lemmatizer = WordNetLemmatizer()\n","\n","import nltk\n","nltk.download('wordnet')\n","from nltk.corpus import wordnet"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v7zZnyWQLpYk","executionInfo":{"status":"ok","timestamp":1679360595530,"user_tz":-330,"elapsed":715,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"0eb33f15-66b6-4e8b-aee1-fb26f9b105e1"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package wordnet to /root/nltk_data...\n"]}]},{"cell_type":"code","source":["# Use pos_review to lemmatization\n","\n","def lemmatize(text):\n","  # convert the POS tags to a format compatible with the WordNetLemmatizer\n","  wn_tags = [(word, nltk.corpus.wordnet.VERB) if tag.startswith('V') else\n","           (word, nltk.corpus.wordnet.NOUN) if tag.startswith('N') else\n","           (word, nltk.corpus.wordnet.ADJ) if tag.startswith('J') else\n","           (word, nltk.corpus.wordnet.ADV) if tag.startswith('R') else\n","           (word, None) for word, tag in text]\n","\n","  # lemmatize each word using the WordNetLemmatizer\n","  lemmatized_words = [wordnet_lemmatizer.lemmatize(word, pos=pos) if pos is not None else word\n","                    for word, pos in wn_tags]\n","\n","  # join the lemmatized words into a sentence\n","  emmatized_text = ' '.join(lemmatized_words)\n","\n","  return emmatized_text"],"metadata":{"id":"F3Il2kH0TcTb","executionInfo":{"status":"ok","timestamp":1679360603578,"user_tz":-330,"elapsed":597,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["df['lemma_review'] = df['POS_tagged'].apply(lemmatize)"],"metadata":{"id":"OKGkqUD_XnIL","executionInfo":{"status":"ok","timestamp":1679360608180,"user_tz":-330,"elapsed":1919,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["print(df.shape)\n","df.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":257},"id":"VYbRw525dnkQ","executionInfo":{"status":"ok","timestamp":1679360610977,"user_tz":-330,"elapsed":24,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"8dc36aa1-6e81-4f5d-8581-aa551e0c64df"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["(1000, 5)\n"]},{"output_type":"execute_result","data":{"text/plain":["                                             reviews  \\\n","0    I was horrified by the extremely small seats...   \n","1    \\r\\nThe worst cabin experience ever: cramped...   \n","2   First time flying with British Airways and fi...   \n","\n","                                     Cleaned_reviews  \\\n","0  i was horrified by the extremely small seats a...   \n","1  the worst cabin experience ever  cramped seats...   \n","2  first time flying with british airways and fir...   \n","\n","                                     tokenize_review  \\\n","0  [i, was, horrified, by, the, extremely, small,...   \n","1  [the, worst, cabin, experience, ever, cramped,...   \n","2  [first, time, flying, with, british, airways, ...   \n","\n","                                          POS_tagged  \\\n","0  [(i, PRON), (was, AUX), (horrified, VERB), (by...   \n","1  [(the, DET), (worst, ADJ), (cabin, NOUN), (exp...   \n","2  [(first, ADJ), (time, NOUN), (flying, VERB), (...   \n","\n","                                        lemma_review  \n","0  i was horrify by the extremely small seat and ...  \n","1  the worst cabin experience ever cramp seat ver...  \n","2  first time fly with british airways and first ...  "],"text/html":["\n","  <div id=\"df-ca7c290d-f623-4372-a3ef-8fcc5e9253d6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>reviews</th>\n","      <th>Cleaned_reviews</th>\n","      <th>tokenize_review</th>\n","      <th>POS_tagged</th>\n","      <th>lemma_review</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>I was horrified by the extremely small seats...</td>\n","      <td>i was horrified by the extremely small seats a...</td>\n","      <td>[i, was, horrified, by, the, extremely, small,...</td>\n","      <td>[(i, PRON), (was, AUX), (horrified, VERB), (by...</td>\n","      <td>i was horrify by the extremely small seat and ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>\\r\\nThe worst cabin experience ever: cramped...</td>\n","      <td>the worst cabin experience ever  cramped seats...</td>\n","      <td>[the, worst, cabin, experience, ever, cramped,...</td>\n","      <td>[(the, DET), (worst, ADJ), (cabin, NOUN), (exp...</td>\n","      <td>the worst cabin experience ever cramp seat ver...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>First time flying with British Airways and fi...</td>\n","      <td>first time flying with british airways and fir...</td>\n","      <td>[first, time, flying, with, british, airways, ...</td>\n","      <td>[(first, ADJ), (time, NOUN), (flying, VERB), (...</td>\n","      <td>first time fly with british airways and first ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ca7c290d-f623-4372-a3ef-8fcc5e9253d6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ca7c290d-f623-4372-a3ef-8fcc5e9253d6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ca7c290d-f623-4372-a3ef-8fcc5e9253d6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df[['reviews','lemma_review']].head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"vc2-yP5idvPt","executionInfo":{"status":"ok","timestamp":1679360620904,"user_tz":-330,"elapsed":553,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"c74bd3fc-45ed-43b9-9522-faca0cea4320"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                             reviews  \\\n","0    I was horrified by the extremely small seats...   \n","1    \\r\\nThe worst cabin experience ever: cramped...   \n","2   First time flying with British Airways and fi...   \n","3    The latest affront. Stood in first class lin...   \n","4    Booked a flight return flight between London...   \n","\n","                                        lemma_review  \n","0  i was horrify by the extremely small seat and ...  \n","1  the worst cabin experience ever cramp seat ver...  \n","2  first time fly with british airways and first ...  \n","3  the latest affront stand in first class line f...  \n","4  book a flight return flight between london and...  "],"text/html":["\n","  <div id=\"df-fbc4f413-122d-4eec-a5fd-b38b91b32105\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>reviews</th>\n","      <th>lemma_review</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>I was horrified by the extremely small seats...</td>\n","      <td>i was horrify by the extremely small seat and ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>\\r\\nThe worst cabin experience ever: cramped...</td>\n","      <td>the worst cabin experience ever cramp seat ver...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>First time flying with British Airways and fi...</td>\n","      <td>first time fly with british airways and first ...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>The latest affront. Stood in first class lin...</td>\n","      <td>the latest affront stand in first class line f...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Booked a flight return flight between London...</td>\n","      <td>book a flight return flight between london and...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fbc4f413-122d-4eec-a5fd-b38b91b32105')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-fbc4f413-122d-4eec-a5fd-b38b91b32105 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-fbc4f413-122d-4eec-a5fd-b38b91b32105');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["### **6. Sentiment Analysis using VADER**\n","\n","Sentiment Analysis is the process of identifying and extracting the sentiment behind a piece of text, i.e., whether the text expresses a positive, negative, or neutral sentiment. **VADER (Valence Aware Dictionary and Sentiment Reasoner)** is a pre-trained sentiment analysis model in Python that can analyze the sentiment of a piece of text and classify it as either positive, negative, or neutral."],"metadata":{"id":"_x24BEYXgF3T"}},{"cell_type":"code","source":["!pip install vaderSentiment"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XeBfBK4XeSyO","executionInfo":{"status":"ok","timestamp":1679360638187,"user_tz":-330,"elapsed":5338,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"48954c11-9eb5-4c31-b093-b174a6c0fc8f"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting vaderSentiment\n","  Downloading vaderSentiment-3.3.2-py2.py3-none-any.whl (125 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/126.0 KB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m126.0/126.0 KB\u001b[0m \u001b[31m10.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.9/dist-packages (from vaderSentiment) (2.27.1)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.9/dist-packages (from requests->vaderSentiment) (2.0.12)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests->vaderSentiment) (2022.12.7)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests->vaderSentiment) (1.26.15)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests->vaderSentiment) (3.4)\n","Installing collected packages: vaderSentiment\n","Successfully installed vaderSentiment-3.3.2\n"]}]},{"cell_type":"code","source":["from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n","analyzer = SentimentIntensityAnalyzer()"],"metadata":{"id":"IzGKQTefmI9B","executionInfo":{"status":"ok","timestamp":1679360642822,"user_tz":-330,"elapsed":7,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":["The polarity_scores method returns a dictionary containing the positive, negative, neutral, and compound scores for the given text. The compound score is a normalized score that ranges from -1 (extremely negative) to +1 (extremely positive), with a score of 0 indicating a neutral sentiment."],"metadata":{"id":"XS_4I330nZS6"}},{"cell_type":"code","source":["# function to calculate vader sentiment\n","\n","def vadersentimentanalysis(review):\n","    vs = analyzer.polarity_scores(review)\n","    \n","    return vs['compound']"],"metadata":{"id":"Js78FjaomTNb","executionInfo":{"status":"ok","timestamp":1679360712941,"user_tz":-330,"elapsed":600,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["df['Sentiment'] = df['lemma_review'].apply(vadersentimentanalysis)"],"metadata":{"id":"rxJ96uG7nuWk","executionInfo":{"status":"ok","timestamp":1679360722507,"user_tz":-330,"elapsed":2586,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["# function to analyse\n","\n","def vader_analysis(compound):\n","    if compound >= 0.5:\n","        return 'Positive'\n","    elif compound < 0 :\n","        return 'Negative'\n","    else:\n","        return 'Neutral'"],"metadata":{"id":"UHtV0WCan8cL","executionInfo":{"status":"ok","timestamp":1679360725849,"user_tz":-330,"elapsed":10,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["df['Analysis'] = df['Sentiment'].apply(vader_analysis)"],"metadata":{"id":"_ZRWQ20MoSQu","executionInfo":{"status":"ok","timestamp":1679360727919,"user_tz":-330,"elapsed":10,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["print(df.shape)\n","df.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":257},"id":"lHRiEIrOoa2L","executionInfo":{"status":"ok","timestamp":1679360730937,"user_tz":-330,"elapsed":1066,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"61d39097-379d-474e-ee30-111e0c303be7"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["(1000, 7)\n"]},{"output_type":"execute_result","data":{"text/plain":["                                             reviews  \\\n","0    I was horrified by the extremely small seats...   \n","1    \\r\\nThe worst cabin experience ever: cramped...   \n","2   First time flying with British Airways and fi...   \n","\n","                                     Cleaned_reviews  \\\n","0  i was horrified by the extremely small seats a...   \n","1  the worst cabin experience ever  cramped seats...   \n","2  first time flying with british airways and fir...   \n","\n","                                     tokenize_review  \\\n","0  [i, was, horrified, by, the, extremely, small,...   \n","1  [the, worst, cabin, experience, ever, cramped,...   \n","2  [first, time, flying, with, british, airways, ...   \n","\n","                                          POS_tagged  \\\n","0  [(i, PRON), (was, AUX), (horrified, VERB), (by...   \n","1  [(the, DET), (worst, ADJ), (cabin, NOUN), (exp...   \n","2  [(first, ADJ), (time, NOUN), (flying, VERB), (...   \n","\n","                                        lemma_review  Sentiment  Analysis  \n","0  i was horrify by the extremely small seat and ...    -0.9362  Negative  \n","1  the worst cabin experience ever cramp seat ver...    -0.8624  Negative  \n","2  first time fly with british airways and first ...     0.9754  Positive  "],"text/html":["\n","  <div id=\"df-5d5b762c-1b3e-4cf7-aed1-d020e1fe9371\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>reviews</th>\n","      <th>Cleaned_reviews</th>\n","      <th>tokenize_review</th>\n","      <th>POS_tagged</th>\n","      <th>lemma_review</th>\n","      <th>Sentiment</th>\n","      <th>Analysis</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>I was horrified by the extremely small seats...</td>\n","      <td>i was horrified by the extremely small seats a...</td>\n","      <td>[i, was, horrified, by, the, extremely, small,...</td>\n","      <td>[(i, PRON), (was, AUX), (horrified, VERB), (by...</td>\n","      <td>i was horrify by the extremely small seat and ...</td>\n","      <td>-0.9362</td>\n","      <td>Negative</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>\\r\\nThe worst cabin experience ever: cramped...</td>\n","      <td>the worst cabin experience ever  cramped seats...</td>\n","      <td>[the, worst, cabin, experience, ever, cramped,...</td>\n","      <td>[(the, DET), (worst, ADJ), (cabin, NOUN), (exp...</td>\n","      <td>the worst cabin experience ever cramp seat ver...</td>\n","      <td>-0.8624</td>\n","      <td>Negative</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>First time flying with British Airways and fi...</td>\n","      <td>first time flying with british airways and fir...</td>\n","      <td>[first, time, flying, with, british, airways, ...</td>\n","      <td>[(first, ADJ), (time, NOUN), (flying, VERB), (...</td>\n","      <td>first time fly with british airways and first ...</td>\n","      <td>0.9754</td>\n","      <td>Positive</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d5b762c-1b3e-4cf7-aed1-d020e1fe9371')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5d5b762c-1b3e-4cf7-aed1-d020e1fe9371 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5d5b762c-1b3e-4cf7-aed1-d020e1fe9371');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["# Number of Positive,Negative and Neutral element present\n","value_count = df['Analysis'].value_counts()\n","print(value_count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VP6uDdMcobGd","executionInfo":{"status":"ok","timestamp":1679360737779,"user_tz":-330,"elapsed":518,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"24c5e6e1-de7d-4a26-d606-1533fa6c166e"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Positive    461\n","Negative    455\n","Neutral      84\n","Name: Analysis, dtype: int64\n"]}]},{"cell_type":"markdown","source":["### **7. Visualization**\n","\n","Review Analysis of Positive,Neagative and Neutral Review."],"metadata":{"id":"0CuaHjlI165h"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(15,7))\n","\n","plt.subplot(1,3,2)\n","plt.title(\"Reviews Analysis\")\n","plt.pie(value_count.values, labels = value_count.index, explode = (0, 0, 0.25), autopct='%1.1f%%', shadow=False)"],"metadata":{"id":"kjfa0h8YobQ8","colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"ok","timestamp":1679361060560,"user_tz":-330,"elapsed":660,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"0a18b6c5-d595-4395-acad-eea357cce289"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["([<matplotlib.patches.Wedge at 0x7f7635829910>,\n","  <matplotlib.patches.Wedge at 0x7f763588f280>,\n","  <matplotlib.patches.Wedge at 0x7f763583e640>],\n"," [Text(0.13443739547091973, 1.0917539039082917, 'Positive'),\n","  Text(-0.4145580984795792, -1.018892331399641, 'Negative'),\n","  Text(1.3032652301624312, -0.3521359678443337, 'Neutral')],\n"," [Text(0.07332948843868349, 0.5955021294045227, '46.1%'),\n","  Text(-0.2261225991706795, -0.5557594534907132, '45.5%'),\n","  Text(0.8205744041763455, -0.22171523901309897, '8.4%')])"]},"metadata":{},"execution_count":32},{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x504 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### **8. Word Cloud Visualization**\n","Word Cloud or Tag Clouds is a visualization technique for texts that are natively used for visualizing the tags or keywords from the websites"],"metadata":{"id":"WHKc9gWTuzvV"}},{"cell_type":"code","source":["from wordcloud import WordCloud, STOPWORDS\n","stopwords = set(STOPWORDS)"],"metadata":{"id":"pZzfOkGuu0FG","executionInfo":{"status":"ok","timestamp":1679361658761,"user_tz":-330,"elapsed":636,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["def show_wordcloud(data):\n","    wordcloud = WordCloud(\n","        background_color='white',\n","        stopwords=stopwords,\n","        max_words=100,\n","        max_font_size=30,\n","        scale=3,\n","        random_state=1)\n","\n","    wordcloud=wordcloud.generate(str(data))\n","\n","    fig = plt.figure(1, figsize=(12, 12))\n","    plt.axis('off')\n","\n","    plt.imshow(wordcloud)\n","    plt.show()\n","\n","show_wordcloud(df.lemma_review)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"rGKYT8kBwT-0","executionInfo":{"status":"ok","timestamp":1679362417251,"user_tz":-330,"elapsed":1780,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}},"outputId":"7b42c238-782c-49e5-f7ff-e5e1f2d955c0"},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 864x864 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["### **8. Export Cleaned Dataset**\n"],"metadata":{"id":"uoDiAlsSuIyU"}},{"cell_type":"code","source":["df.to_csv(\"BA_reviews.csv\")"],"metadata":{"id":"urrHB4vVuN_s","executionInfo":{"status":"ok","timestamp":1679362463431,"user_tz":-330,"elapsed":534,"user":{"displayName":"Pradeep Parida","userId":"05186378377723266005"}}},"execution_count":35,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3.9.13 ('venv': venv)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.13"},"orig_nbformat":4,"vscode":{"interpreter":{"hash":"4f7924c4c56b083e0e50eadfe7ef592a7a8ef70df33a0047f82280e6be1afe15"}},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":0}